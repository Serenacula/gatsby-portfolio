{"version":3,"sources":["webpack://faylees-portfolio/./src/components/Project/Project.module.css","webpack://faylees-portfolio/./src/components/Project/Project.js","webpack://faylees-portfolio/./src/pages/portfolio.js","webpack://faylees-portfolio/./src/pages/css/portfolio.module.css"],"names":["combine","utilities","props","frontmatter","data","useStaticQuery","link","linkStatus","console","log","title","image","split","pop","imageData","allFile","edges","find","item","node","relativePath","src","publicURL","className","alt","styles","allImageSharp","resize","originalName","G","gatsbyImageData","imgStyle","objectFit","date","Date","toUTCString","replace","href","description","menuItems","require","sortedProjects","allMarkdownRemark","nodes","sort","b","a","testNode","test","Error","Wrapper","SEO","NavigationBar","links","result","push","key","projectLoop"],"mappings":"gOACO,MAGM,EAAQ,+B,cCIfA,EAAUC,IAsJhB,MAhJA,SAAiBC,GAEb,IAAMC,EAAcD,EAAME,KAAKD,YAmBzBC,GAAOC,oBAAe,cAyBxBC,EAAO,KACPC,EAAa,KACbJ,EAAYG,MACZA,EAAOH,EAAYG,KACnBC,GAAa,IAGbD,EAAO,KACPC,GAAa,EACbC,QAAQC,IAAI,IAAMN,EAAYO,MAAQ,mDAO1C,IAAIC,EAAQ,KAGZ,GAAIR,EAAYQ,MAMZ,GAAkB,QAHFR,EAAYQ,MAAMC,MAAM,KAAKC,MAGpB,CAErB,IAAMC,EAAYV,EAAKW,QAAQC,MAAMC,MAAK,SAACC,GAAD,OAAUA,EAAKC,KAAKC,eAAiBjB,EAAYQ,SAEvFG,EACAH,EAAQ,uBAAKU,IAAKP,EAAUK,KAAKG,UAAWC,UDrFpC,kCCqFgEC,IAAI,SAI5Eb,EAAQ,uBAAKY,UAAWE,IACxBjB,QAAQC,IAAI,0BAA4BN,EAAYO,YAKvD,CAED,IAAMI,EAAYV,EAAKsB,cAAcV,MAAMC,MAAK,SAACC,GAAD,OAAUA,EAAKC,KAAKQ,OAAOC,eAAiBzB,EAAYQ,SAEpGG,EACAH,EAAQ,gBAAC,EAAAkB,EAAD,CAAaN,UAAWE,EAAcd,MAAOG,EAAUK,KAAKW,gBAAiBC,SAAU,CAACC,UAAW,SAAUR,IAAI,SAGzHb,EAAQ,uBAAKY,UAAWE,IACxBjB,QAAQC,IAAI,0BAA4BN,EAAYO,QAQhE,IACMuB,EAAO,IAAIC,KAAK/B,EAAY8B,MAAME,cAAcC,QAAQ,gBAAiB,IAG/E,OAEI,uBAAKb,UD1HW,mCC4HZ,uBAAKA,UD3HK,iCC6HN,qBAAGc,KAAM/B,EAAMiB,UD5HN,oCC6HJZ,GAIL,uBAAKY,UD9HG,mCC+HJ,qBAAGc,KAAM/B,EAAMiB,UD9HV,oCC+HD,sBAAIA,UAAWvB,ED9HlB,+BC8HwCO,EAAa,aAAe,uBAC5DJ,EAAYO,MACZH,EAAa,kCAAkB,OAIxC,qBAAGgB,UDnIH,+BCmI4BpB,EAAYmC,eAIhD,uBAAKf,UDtIQ,oCCuIT,yBA5BU,WA8BLU,EACA1B,EA7BK,MA6BwB,KAC9B,yBACKD,O,40BCxIzB,IAAMiC,EAAYC,EAAQ,MACpBxC,EAAUC,IAgET,IAqBP,EAlFA,YAA4B,IAElBwC,EAFiB,EAAPrC,KAEYsC,kBAAkBC,MAAMC,MAChD,SAASC,EAAEC,GAEP,OAAO,IAAIZ,KAAKY,EAAE3C,YAAY8B,MAAQ,IAAIC,KAAKW,EAAE1C,YAAY8B,SAIrE,SAASc,EAAS5B,GAGd,GAAK,oBAAoB6B,KAAK7B,EAAKhB,YAAY8B,MAU3C,OAAO,EATP,MAAM,IAAIgB,MAAM,wBAA0B9B,EAAKhB,YAAY8B,KAAO,4BAA8Bd,EAAKhB,YAAYO,OAwBzH,OACI,gBAACwC,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAKzC,MAAM,cACX,uBAAKa,UAAU,yBACX,uBAAKA,UAAWvB,EAAQ,aC1DZ,0CD2DR,gBAACoD,EAAA,EAAD,CAAeC,MAAOd,IAEtB,sBAAIhB,UAAWvB,EAAQ,kBC5DV,+CD4Db,aACA,sBAAIuB,UAAWvB,EAAQ,kBC5DP,kDD4DhB,qDAKR,uBAAKuB,UAAU,yBACX,uBAAKA,UAAWvB,EAAQ,aCjEX,2CDwCzB,SAAqB2C,GAEjB,IADA,IACA,EADIW,EAAS,GACb,IAAmBX,KAAnB,aAA0B,CAAC,IAAhBxB,EAAe,QAElB4B,EAAS5B,IACTmC,EAAOC,KAAK,gBAAC,EAAD,CAASC,IAAKrC,EAAKhB,YAAYO,MAAON,KAAMe,KAGhE,OAAOmC,EAkBMG,CAAYhB","file":"component---src-pages-portfolio-js-fb9ec5962f75c635031a.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport const outerDiv = \"Project-module--outerDiv--3fhWF\";\nexport const topDiv = \"Project-module--topDiv--3jB5-\";\nexport const imageWrap = \"Project-module--imageWrap--3Ohp_\";\nexport const image = \"Project-module--image--2KApF\";\nexport const svgImage = \"Project-module--svgImage--3SFQX\";\nexport const innerDiv = \"Project-module--innerDiv--3fs-d\";\nexport const titleWrap = \"Project-module--titleWrap--3fDQk\";\nexport const title = \"Project-module--title--2_aoz\";\nexport const text = \"Project-module--text--6UzJV\";\nexport const bottomDiv = \"Project-module--bottomDiv--1-dHP\";\nexport const disableInteraction = \"Project-module--disableInteraction--2EeAF\";","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport * as styles from \"./Project.module.css\"\n\nimport * as utilities from \"../../resources/scripts/utilities\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nconst combine = utilities.combineClasses\n\n// This component is used on the Portfolio page\n//\n// It displays a project, as part of a list of such projects\n\nfunction Project(props) {\n    \n    const frontmatter = props.data.frontmatter\n    // const content = props.data.html\n    \n\n    \n    \n    // console.log(frontmatter.link);\n    // const link = frontmatter.link ? frontmatter.link : disableLink()\n    \n    // Checking if there is a link. If not, interactivity is disabled to avoid confusion.\n    // let linkStatus = true\n    // function disableLink() {\n    //     linkStatus = false\n    //     console.log(\"'\" + frontmatter.title + \"' has no link detected, disabling interaction.\");\n    //     return null\n    // }\n    \n    \n    // This query gets the paths of all the images, and also their relativePath so we can check the name\n    const data = useStaticQuery(graphql`\n\t\t{\n\t\t\tallImageSharp {\n\t\t\t\tedges {\n\t\t\t\t\tnode {\n\t\t\t\t\t\tresize {\n\t\t\t\t\t\t\toriginalName\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgatsbyImageData\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tallFile(filter: { extension: { eq: \"svg\" } }) {\n\t\t\t\tedges {\n\t\t\t\t\tnode {\n\t\t\t\t\t\trelativePath\n\t\t\t\t\t\tpublicURL\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`)\n    \n    // Link Validating\n    \n    let link = null\n    let linkStatus = null\n    if (frontmatter.link) {\n        link = frontmatter.link\n        linkStatus = true\n    }\n    else {\n        link = null\n        linkStatus = false\n        console.log(\"'\" + frontmatter.title + \"' has no link detected, disabling interaction.\")\n        \n    }\n    \n    \n    // Image Sorting //\n    \n    let image = null\n    \n    // First, let's check if we actually have an image.\n    if (frontmatter.image) {\n        \n        // Now get image extension\n        let extension = frontmatter.image.split('.').pop();\n        \n        // If the image is an svg, then we just need the public address of it, since we don't need to do anything to it.\n        if (extension === \"svg\") {\n            \n            const imageData = data.allFile.edges.find((item) => item.node.relativePath === frontmatter.image)\n            \n            if (imageData) {\n                image = <img src={imageData.node.publicURL} className={styles.svgImage} alt=\"boo\" />\n            }\n            else {\n                // A placeholder div, if the image doesn't exist\n                image = <div className={styles.image} />\n                console.log(\"Cannot find image for: \" + frontmatter.title);\n            }\n        }\n        \n        // if the image ISN'T an svg, then we want to use imageSharp, and GatsbyImage.\n        else {\n            \n            const imageData = data.allImageSharp.edges.find((item) => item.node.resize.originalName === frontmatter.image)\n            \n            if (imageData) {\n                image = <GatsbyImage className={styles.image} image={imageData.node.gatsbyImageData} imgStyle={{objectFit: \"cover\"}} alt=\"boo\" />\n            }\n            else {\n                image = <div className={styles.image} />\n                console.log(\"Cannot find image for: \" + frontmatter.title);\n            }\n        }\n    }\n    \n    \n    \n    \n    const bottomDivText = \"Posted: \"\n    const date = new Date(frontmatter.date).toUTCString().replace(\" 00:00:00 GMT\", \"\")\n    const dividerString = \" | \"\n    \n    return (\n        // Main wrapper div\n        <div className={styles.outerDiv}>\n            {/* Top div */}\n            <div className={styles.topDiv}>\n                {/* Image */}\n                <a href={link} className={styles.imageWrap}>\n                    {image}\n                </a>\n                \n                {/* Wrapper div for title and description */}\n                <div className={styles.innerDiv}>\n                    <a href={link} className={styles.titleWrap}>\n                        <h3 className={combine(styles.title, linkStatus ? \"linkColour\" : \"disabledLinkColour\")}>\n                            {frontmatter.title}\n                            {linkStatus ? <span> Â»</span> : null}\n                        </h3>\n                    </a>\n                    \n                    <p className={styles.text}>{frontmatter.description}</p>\n                </div>\n            </div>\n            {/* Bottom div */}\n            <div className={styles.bottomDiv}>\n                <p>\n                    {bottomDivText}\n                    {date}\n                    {linkStatus ? dividerString : null}\n                    <i>\n                        {link}\n                    </i>\n                </p>\n            </div>\n        </div>\n\t)\n}\n\nexport default Project","import React from \"react\"\nimport Wrapper from \"../components/Wrapper\"\nimport { graphql } from \"gatsby\"\n\nimport * as utilities from \"../resources/scripts/utilities\"\n\n// import \"./css/defaultLayout.css\"\n// import \"./css/customLayout.css\"\nimport * as styles from \"./css/portfolio.module.css\"\n\nimport NavigationBar from \"../components/NavigationBar/NavigationBar\"\nimport Project from \"../components/Project/Project\"\nimport SEO from \"../components/SEO\"\n\nconst menuItems = require(\"../resources/json/menuItems.json\")\nconst combine = utilities.combineClasses\n\n\nfunction Portfolio({data}) {\n    \n    const sortedProjects = data.allMarkdownRemark.nodes.sort(\n        function(b,a) {\n            // Currently showing newest first.\n            return new Date(a.frontmatter.date) - new Date(b.frontmatter.date)\n        }\n    )\n    \n    function testNode(node) {\n        \n        // Testing that the date is in the correct format: YYYY-MM-DD\n        if (!/\\d{4}-\\d{2}-\\d{2}/.test(node.frontmatter.date)) {\n            throw new Error(\"Invalid date format: \" + node.frontmatter.date + \" from the markdown file: \" + node.frontmatter.title);\n        }\n        \n        // Testing that the image requested ends in .svg\n        // if (!/.svg$/.test(node.frontmatter.image)) {\n        //     throw new Error(\"Invalid image in markdown file: \" + node.frontmatter.title + \", the code currently only accepts .svg images for projects\")\n        // }\n        // The other two queries are tested in the gatsby post.\n        else {\n            return true\n        }\n    }\n    \n    function projectLoop(nodes) {\n        let result = []\n        for (const node of nodes) {\n            // Testing the data in the node, in case it is missing something or has an error\n            if (testNode(node)) {\n                result.push(<Project key={node.frontmatter.title} data={node} />)\n            }\n        }\n        return result\n    }\n\n    return (\n        <Wrapper>\n            <SEO title=\"Portfolio\" />\n            <div className=\"firstColourBackground\">\n                <div className={combine(\"mainColumn\", styles.firstSection)}>\n                    <NavigationBar links={menuItems} />\n                \n                    <h1 className={combine(\"firstColourText\", styles.firstSectionTitle)}>Portfolio</h1>\n                    <h2 className={combine(\"firstColourText\", styles.firstSectionSubtitle)}>This is a list of all the projects I've created</h2>\n                </div>\n                \n            </div>\n            \n            <div className=\"firstColourBackground\">\n                <div className={combine(\"mainColumn\", styles.secondSection)}>\n                    {projectLoop(sortedProjects)}\n                </div>\n            </div>\n            \n        </Wrapper>\n    )\n\n}\n\nexport const result = graphql`\n    query MyQuery {\n        allMarkdownRemark(\n        filter: {frontmatter: {type: {eq: \"project\"}, posted: {eq: true}}}\n        ) {\n            nodes {\n                frontmatter {\n                    title\n                    date\n                    image\n                    type\n                    posted\n                    link\n                    description\n                }\n                html\n            }\n        }\n    }\n`\n\nexport default Portfolio","// extracted by mini-css-extract-plugin\nexport const firstSection = \"portfolio-module--firstSection--343W-\";\nexport const firstSectionTitle = \"portfolio-module--firstSectionTitle--2MmK7\";\nexport const firstSectionSubtitle = \"portfolio-module--firstSectionSubtitle--1LZND\";\nexport const secondSection = \"portfolio-module--secondSection--2ZC45\";"],"sourceRoot":""}